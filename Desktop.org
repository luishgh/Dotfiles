#+TITLE: Emacs Desktop Environment
#+AUTHOR: Luis Henrique
#+PROPERTY: header-args:emacs-lisp :tangle .emacs.d/lisp/lhgh-desktop.el :mkdirp yes

* Window Management

** EXWM Configuration

#+begin_src emacs-lisp
  (defun lhgh/run-in-background (command)
    "Run command in background (async). Useful for startup programs like nm-applet"
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))
  
  (defun lhgh/set-wallpaper ()
    (interactive)
    ;; NOTE: You will need to update this to a valid background path!
    (start-process-shell-command
      "feh" nil  "feh --bg-scale ~/Documents/Wallpapers/lord-of-the-rings-wallpapers.jpg"))
  
  (defun lhgh/exwm-init-hook ()
    (with-eval-after-load 'perspective
      ;; Set transparency (TODO: fix this)
      (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
      (add-to-list 'default-frame-alist '(alpha . (90 . 90)))


      ;; Set up perspective names on initial workspaces
      (exwm-workspace-switch-create 0)
      (persp-switch "VMs")
      (persp-kill "Main")
      (exwm-workspace-switch-create 1)
      (persp-switch "Browsers")
      (persp-kill "Main")
      (exwm-workspace-switch-create 2)
      (persp-switch "Chat")

      ;; Launch Telega in workspace 2 if we've logged in before
      (when (file-exists-p "~/.telega/db.sqlite")
        (telega nil))

      (persp-kill "Main")
      (exwm-workspace-switch-create 3)
      (persp-switch "Code")
      (persp-kill "Main")
      (exwm-workspace-switch-create 4)
      (persp-switch "Config")
      (persp-kill "Main")
      (exwm-workspace-switch-create 5)
      (persp-switch "Mail")
      (persp-kill "Main")
      (exwm-workspace-switch-create 6)
      (persp-switch "School")
      (persp-kill "Main")
      (exwm-workspace-switch-create 7)
      (persp-switch "Media")
      (persp-kill "Main")
      (exwm-workspace-switch-create 8)
      (persp-switch "Game")
      (persp-kill "Main")

      ;; Make workspace 1 be the one where we land at startup
      (exwm-workspace-switch-create 1)

      ;; Open eshell by default
      (eshell)

      ;; Load eshell aliases
      (eshell-read-aliases-list))

    ;; Show battery status in the mode line
    ;; (display-battery-mode 1)
  
    ;; Show the time and date in modeline
    ;; (setq display-time-day-and-date t)
    ;; (setq display-time-format "%a %b %d %H:%M") ;; look for the format-time-string function for the syntax of this variable
    ;; (display-time-mode 1)
    ;; ;; Also take a look at display-time-format and format-time-string

    ;; Start the Polybar panel
    (lhgh/start-panel "polybar")
  
    ;; Launch apps that will run in the background
    (lhgh/run-in-background "nm-applet"))
  
  (defun lhgh/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))
  
  (defun lhgh/exwm-update-title ()
    (pcase exwm-class-name
      ("qutebrowser" (exwm-workspace-rename-buffer (format "Qutebrowser: %s" exwm-title)))
      ("Firefox" (exwm-workspace-rename-buffer (format "Firefox: %s" exwm-title)))))
  
  (defun lhgh/configure-window-by-class ()
    (interactive)
    (pcase exwm-class-name
      ("Firefox" (exwm-workspace-move-window 1))
      ("qutebrowser" (exwm-workspace-move-window 1))
      ("TelegramDesktop" (exwm-workspace-move-window 2))
      ("vimiv" (exwm-workspace-move-window 6))
      ("mpv" (exwm-layout-set-fullscreen))))
  
  (use-package exwm
    :if lhgh/exwm-enabled
    :config
    ;; Set the default number of workspaces
    (setq exwm-workspace-number 1)

    ;; remap Caps Lock to Ctrl
    (start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/exwm/Xmodmap")
  
    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'lhgh/exwm-update-class)
  
    ;; When window title updates, use it to set the buffer name
    (add-hook 'exwm-update-title-hook #'lhgh/exwm-update-title)
  
    ;; Configure windows as they're created
    (add-hook 'exwm-manage-finish-hook #'lhgh/configure-window-by-class)
  
    ;; When EXWM starts up, do some extra confifuration
    (add-hook 'exwm-init-hook #'lhgh/exwm-init-hook)
  
    (lhgh/set-wallpaper)
  
    ;; Load the system tray before exwm-init
    ;; (require 'exwm-systemtray)
    ;; (setq exwm-systemtray-height 22)
    ;; (exwm-systemtray-enable)
  
    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
          '(?\C-x
            ?\C-u
            ?\C-h
            ?\C-g
            ?\M-x
            ?\M-`
            ?\M-&
            ?\M-:
            ?\C-\ ))  ;; Ctrl+Space
  
    ;; Ctrl+Q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)
  
    ;; Set up global key bindings.  These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
          `(
            ;; Reset to line-mode
            ([?\s-r] . exwm-reset)
            ;; Toggle char-mode
            ([?\s-c] . exwm-input-release-keyboard)
  
            ;; Move between windows
            ([?\s-h] . windmove-left)
            ([?\s-l] . windmove-right)
            ([?\s-k] . windmove-up)
            ([?\s-j] . windmove-down)
  
            ;; Move windows
            ([?\s-H] . windmove-swap-states-left)
            ([?\s-L] . windmove-swap-states-right)
            ([?\s-K] . windmove-swap-states-up)
            ([?\s-J] . windmove-swap-states-down)
  
            ;; Kill buffers
            ([?\s-C] . (lambda () (interactive) (kill-buffer)))
  
            ;; Launch applications via shell command
            ([?\s-&] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))
  
            ;; Switch workspace
            ([?\s-w] . exwm-workspace-switch)
  
            ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                      (number-sequence 0 9))))
  
    (exwm-enable))
#+end_src

** Keybindings

#+begin_src emacs-lisp
  ;; TODO: setup audio to use pulsemixer
  (use-package desktop-environment
    :after exwm
    :config
    (setq desktop-environment-update-exwm-global-keys :prefix)
    (define-key desktop-environment-mode-map (kbd "s-l") nil) ;; disables the s-l keybinding that comes by default
    (desktop-environment-mode)
    :custom
    (desktop-environment-brightness-small-increment "5%+")
    (desktop-environment-brightness-small-decrement "5%-")
    (desktop-environment-brightness-normal-increment "10%+")
    (desktop-environment-brightness-normal-decrement "10%-")
    (desktop-environment-screenshot-command "flameshot gui -d 200"))
  
  (exwm-input-set-key (kbd "<S-s-return>") 'vterm)
  
  (with-eval-after-load 'hydra
    (defhydra hydra-exwm-resize (:timeout 4)
      "Resize Window (Shift is bigger steps)"
      ("j" (lambda () (interactive) (exwm-layout-enlarge-window 10)) "V 10")
      ("J" (lambda () (interactive) (exwm-layout-enlarge-window 30)) "V 30")
      ("k" (lambda () (interactive) (exwm-layout-shrink-window 10)) "^ 10")
      ("K" (lambda () (interactive) (exwm-layout-shrink-window 30)) "^ 30")
      ("h" (lambda () (interactive) (exwm-layout-shrink-window-horizontally 10)) "< 10")
      ("H" (lambda () (interactive) (exwm-layout-shrink-window-horizontally 30)) "< 30")
      ("l" (lambda () (interactive) (exwm-layout-enlarge-window-horizontally 10)) "> 10")
      ("L" (lambda () (interactive) (exwm-layout-enlarge-window-horizontally 30)) "> 30"))
  
    (exwm-input-set-key (kbd "s-R") 'hydra-exwm-resize/body))
  
  (defun lhgh/set-keyboard-layout (layout)
    "Set X keyboard layout to given layout"
    (start-process-shell-command "setting-keyboard-layout" nil (concat "setxkbmap " layout " && xmodmap ~/.emacs.d/exwm/Xmodmap")))
  
  (defun lhgh/toggle-keyboard-layout ()
    "Toggle keyboard layout between us and pt-br (abnt2)"
    (interactive)
    (pcase (string-trim (shell-command-to-string "setxkbmap -query | awk '/layout/ {print $2}'"))
      ("us" (lhgh/set-keyboard-layout "br"))
      ("br" (lhgh/set-keyboard-layout "us"))))
  
  (exwm-input-set-key (kbd "s-SPC") 'lhgh/toggle-keyboard-layout)
#+end_src

** Launching Apps
Minimalist alternative to =counsel-linux-app=. Uses the builtin completion, so it is compatible with =Vertico=

#+begin_src emacs-lisp
  (use-package app-launcher
    :straight '(app-launcher :host github :repo "SebastienWae/app-launcher")
    :after exwm
    :commands app-launcher-run-app
    :init
    (exwm-input-set-key (kbd "s-p") 'app-launcher-run-app))
#+end_src

* Desktop Environment

** Desktop File
This file is used the display manager (GDM, LightDM, etc) to display EXWM as a desktop environment option when you log in.

#+begin_src shell :tangle no
  sudo ln -f ~/.emacs/exwm/EXWM.desktop /usr/share/xsessions/EXWM.desktop
#+end_src

#+begin_src shell :tangle .emacs.d/exwm/EXWM.desktop :mkdirp yes
  [Desktop Entry]
  Name=EXWM
  Comment=Emacs Window Manager
  Exec=sh /home/daviwil/.emacs.d/exwm/start-exwm.sh
  TryExec=sh
  Type=Application
  X-LightDM-DesktopName=exwm
  DesktopNames=exwm
#+end_src

** Launcher Script
This launcher script is invoked by =EXWM.desktop= to start Emacs and load our desktop environment configuration.  We also start up some other helpful applications to configure the desktop experience.

#+begin_src shell :tangle .emacs.d/exwm/start-exwm.sh :shebang #!/bin/sh
  # Source .profile for common environment vars
  . ~/.profile
  
  xhost +SI:localuser:$USER
  
  # Run the screen compositor
  picom &

  # Run user services
  shepherd &

  # Enable screen locking on suspend
  # xss-lock -- slock &
  
  # Fire it up
  exec dbus-launch --exit-with-session emacs -mm --debug-init --use-exwm
#+end_src

*Obs*
As a fallback (for guix), symlink the =start-exwm.sh= file to =~/.xsession=.

#+begin_src shell :tangle no
  sudo ln -f ~/.emacs/exwm/start-exwm.sh ~/.xsession
#+end_src

** Keyboard Configuration
The =Xmodmap= file will be used with the =xmodmap= program to remap CapsLock to Ctrl inside of our desktop environment:

#+begin_src sh :tangle .emacs.d/exwm/Xmodmap
  clear lock
  clear control
  keycode 66 = Control_L
  add control = Control_L
  add Lock = Control_R
#+end_src

** Panel
This part of the configuration should work with any panel. Curently using Polybar.

*** Emacs Configuration

#+begin_src emacs-lisp
  ;; Make sure the server is started (better to do this in your main Emacs config!)
  ;; This is needed to get information for the panel from emacs
  (server-start)

  (defun lhgh/exwm-workspace-icon ()
    "Returns the icon for the current exwm workspace"
    (pcase exwm-workspace-current-index
      (1 "")
      (2 "")
      (3 "")
      (4 "")
      (5 "")
      (6 "")
      (7 "")
      (8 "")
      (9 "")))

  (defvar lhgh/panel-process nil
    "Holds the process of the running panel instance, if any")

  (defun lhgh/kill-panel ()
    "Kills the current running panel if any is present"
    (interactive)
    (when lhgh/panel-process
      (ignore-errors
        (kill-process lhgh/panel-process)))
    (setq lhgh/panel-process nil))

  (defun lhgh/start-panel (panel-name)
    "Start the given panel after killing the running instance if present. `panel-name' must be lowercase"
    (interactive "sName of the panel: ")
    (lhgh/kill-panel) ;; kill any present panel
    (pcase panel-name
      ("polybar"
        (setq lhgh/panel-process (start-process-shell-command "polybar" nil "polybar panel")))))
#+end_src

*** Panel Configuration

**** Polybar
I use Polybar for the panel. I'm thinking about trying to use Xmobar instead in the future but, for now, polybar gets the job done. Reminder: *ipc* feature needs to be enabled on compilation for this config (polybar-msg).

This elisp snippet sets the necessary hook for updating the workspace icon in Polybar.

#+begin_src emacs-lisp
  (defun lhgh/send-polybar-hook (module-name hook-index)
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun lhgh/send-polybar-exwm-workspace ()
    (lhgh/send-polybar-hook "exwm-workspace" 1))

  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook #'lhgh/send-polybar-exwm-workspace)
#+end_src

This is the Polybar configuration. TODO: tangle to other directory and symlink instead.

#+begin_src conf :tangle .config/polybar/config :mkdirp yes
  ; Docs: https://github.com/polybar/polybar
  ;==========================================================

  [settings]
  screenchange-reload = true

  [global/wm]
  margin-top = 0
  margin-bottom = 0

  [colors]
  background = #f0232635
  background-alt = #576075
  foreground = #A6Accd
  foreground-alt = #555
  primary = #ffb52a
  secondary = #e60053
  alert = #bd2c40
  underline-1 = #c792ea

  [bar/panel]
  width = 100%
  height = 35
  offset-x = 0
  offset-y = 0
  fixed-center = true
  enable-ipc = true

  background = ${colors.background}
  foreground = ${colors.foreground}

  line-size = 2
  line-color = #f00

  border-size = 0
  border-color = #00000000

  padding-top = 5
  padding-left = 1
  padding-right = 1

  module-margin = 1

  font-0 = "JetBrains Mono:size=10:weight=bold;2"
  font-1 = "Material Icons:size=14;5"
  font-2 = "JetBrainsMono Nerd Font Mono:size=17;5"

  modules-left = exwm-workspace
  modules-right = cpu temperature battery updates date

  tray-position = right
  tray-padding = 2
  tray-maxsize = 28

  cursor-click = pointer
  cursor-scroll = ns-resize

  [module/exwm-workspace]
  type = custom/ipc
  hook-0 = emacsclient -e "(lhgh/exwm-workspace-icon)" | sed -e 's/^"//' -e 's/"$//'
  initial = 1
  format-underline = ${colors.underline-1}
  format-padding = 1

  [module/cpu]
  type = internal/cpu
  interval = 2
  format = <label> <ramp-coreload>
  format-underline = ${colors.underline-1}
  click-left = emacsclient -e "(proced)"
  label = %percentage:2%%
  ramp-coreload-spacing = 0
  ramp-coreload-0 = ▁
  ramp-coreload-0-foreground = ${colors.foreground-alt}
  ramp-coreload-1 = ▂
  ramp-coreload-2 = ▃
  ramp-coreload-3 = ▄
  ramp-coreload-4 = ▅
  ramp-coreload-5 = ▆
  ramp-coreload-6 = ▇

  [module/date]
  type = internal/date
  interval = 5

  date = "%a %b %e"
  date-alt = "%A %B %d %Y"

  time = %H:%M
  time-alt = %l:%M %p

  format-prefix-foreground = ${colors.foreground-alt}
  format-underline = ${colors.underline-1}

  label = %date% %time%

  [module/battery]
  type = internal/battery
  battery = BAT0
  adapter = ADP1
  full-at = 98
  time-format = %-l:%M

  label-charging = %percentage%% / %time%
  format-charging = <animation-charging> <label-charging>
  format-charging-underline = ${colors.underline-1}

  label-discharging = %percentage%% / %time%
  format-discharging = <ramp-capacity> <label-discharging>
  format-discharging-underline = ${self.format-charging-underline}

  format-full = <ramp-capacity> <label-full>
  format-full-underline = ${self.format-charging-underline}

  ramp-capacity-0 = 
  ramp-capacity-1 = 
  ramp-capacity-2 = 
  ramp-capacity-3 = 
  ramp-capacity-4 = 

  animation-charging-0 = 
  animation-charging-1 = 
  animation-charging-2 = 
  animation-charging-3 = 
  animation-charging-4 = 
  animation-charging-framerate = 750

  [module/temperature]
  type = internal/temperature
  thermal-zone = 0
  warn-temperature = 60

  format = <label>
  format-underline = ${colors.underline-1}
  format-warn = <label-warn>
  format-warn-underline = ${self.format-underline}

  label = %temperature-c%
  label-warn = %temperature-c%!
  label-warn-foreground = ${colors.secondary}

  [module/updates]
  type = custom/script
  exec = ~/.bin/update-notifier.sh
  interval = 3600
  format-underline = ${colors.underline-1}
  format-padding = 1
#+end_src

** GnuPG
This gpg-agent configuration permits using Emacs' minibuffer for gpg passphrases.

Obs: here I use the power of [[https://orgmode.org/manual/Noweb-Reference-Syntax.html#Noweb-Reference-Syntax][Noweb references]] to set the pinentry-emacs path based on the current distro.

#+NAME: pinentry-path
#+begin_src emacs-lisp
  (if lhgh/is-guix-system
      "/home/luishgh/.guix-extra-profiles/emacs/emacs/bin/pinentry-emacs"
    "/usr/bin/pinentry-emacs")
#+end_src

#+begin_src conf :tangle .gnupg/gpg-agent.conf :noweb yes :mkdirp yes
  pinentry-program <<pinentry-path()>>
  allow-emacs-pinentry
  allow-loopback-pinentry
#+end_src

* Provide the lhgh-desktop package
#+begin_src emacs-lisp
  (provide 'lhgh-desktop)
#+end_src
